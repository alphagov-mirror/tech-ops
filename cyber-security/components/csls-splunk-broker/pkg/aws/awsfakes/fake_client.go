// Code generated by counterfeiter. DO NOT EDIT.
package awsfakes

import (
	"sync"

	"github.com/alphagov/tech-ops/cyber-security/components/csls-splunk-broker/pkg/aws"
	"github.com/aws/aws-sdk-go/service/kinesis"
)

type FakeClient struct {
	AssumeRoleStub        func(string) (aws.Client, error)
	assumeRoleMutex       sync.RWMutex
	assumeRoleArgsForCall []struct {
		arg1 string
	}
	assumeRoleReturns struct {
		result1 aws.Client
		result2 error
	}
	assumeRoleReturnsOnCall map[int]struct {
		result1 aws.Client
		result2 error
	}
	PutRecordStub        func(*kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error)
	putRecordMutex       sync.RWMutex
	putRecordArgsForCall []struct {
		arg1 *kinesis.PutRecordInput
	}
	putRecordReturns struct {
		result1 *kinesis.PutRecordOutput
		result2 error
	}
	putRecordReturnsOnCall map[int]struct {
		result1 *kinesis.PutRecordOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) AssumeRole(arg1 string) (aws.Client, error) {
	fake.assumeRoleMutex.Lock()
	ret, specificReturn := fake.assumeRoleReturnsOnCall[len(fake.assumeRoleArgsForCall)]
	fake.assumeRoleArgsForCall = append(fake.assumeRoleArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AssumeRole", []interface{}{arg1})
	fake.assumeRoleMutex.Unlock()
	if fake.AssumeRoleStub != nil {
		return fake.AssumeRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assumeRoleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) AssumeRoleCallCount() int {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	return len(fake.assumeRoleArgsForCall)
}

func (fake *FakeClient) AssumeRoleCalls(stub func(string) (aws.Client, error)) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = stub
}

func (fake *FakeClient) AssumeRoleArgsForCall(i int) string {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	argsForCall := fake.assumeRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) AssumeRoleReturns(result1 aws.Client, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	fake.assumeRoleReturns = struct {
		result1 aws.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) AssumeRoleReturnsOnCall(i int, result1 aws.Client, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	if fake.assumeRoleReturnsOnCall == nil {
		fake.assumeRoleReturnsOnCall = make(map[int]struct {
			result1 aws.Client
			result2 error
		})
	}
	fake.assumeRoleReturnsOnCall[i] = struct {
		result1 aws.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PutRecord(arg1 *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error) {
	fake.putRecordMutex.Lock()
	ret, specificReturn := fake.putRecordReturnsOnCall[len(fake.putRecordArgsForCall)]
	fake.putRecordArgsForCall = append(fake.putRecordArgsForCall, struct {
		arg1 *kinesis.PutRecordInput
	}{arg1})
	fake.recordInvocation("PutRecord", []interface{}{arg1})
	fake.putRecordMutex.Unlock()
	if fake.PutRecordStub != nil {
		return fake.PutRecordStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putRecordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) PutRecordCallCount() int {
	fake.putRecordMutex.RLock()
	defer fake.putRecordMutex.RUnlock()
	return len(fake.putRecordArgsForCall)
}

func (fake *FakeClient) PutRecordCalls(stub func(*kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error)) {
	fake.putRecordMutex.Lock()
	defer fake.putRecordMutex.Unlock()
	fake.PutRecordStub = stub
}

func (fake *FakeClient) PutRecordArgsForCall(i int) *kinesis.PutRecordInput {
	fake.putRecordMutex.RLock()
	defer fake.putRecordMutex.RUnlock()
	argsForCall := fake.putRecordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) PutRecordReturns(result1 *kinesis.PutRecordOutput, result2 error) {
	fake.putRecordMutex.Lock()
	defer fake.putRecordMutex.Unlock()
	fake.PutRecordStub = nil
	fake.putRecordReturns = struct {
		result1 *kinesis.PutRecordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PutRecordReturnsOnCall(i int, result1 *kinesis.PutRecordOutput, result2 error) {
	fake.putRecordMutex.Lock()
	defer fake.putRecordMutex.Unlock()
	fake.PutRecordStub = nil
	if fake.putRecordReturnsOnCall == nil {
		fake.putRecordReturnsOnCall = make(map[int]struct {
			result1 *kinesis.PutRecordOutput
			result2 error
		})
	}
	fake.putRecordReturnsOnCall[i] = struct {
		result1 *kinesis.PutRecordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	fake.putRecordMutex.RLock()
	defer fake.putRecordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aws.Client = new(FakeClient)
