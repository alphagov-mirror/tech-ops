// Code generated by counterfeiter. DO NOT EDIT.
package cslsfakes

import (
	"sync"

	"github.com/alphagov/tech-ops/cyber-security/components/csls-splunk-broker/pkg/cloudfoundry"
	"github.com/alphagov/tech-ops/cyber-security/components/csls-splunk-broker/pkg/csls"
)

type FakeCloudfoundryLogPutter struct {
	PutCloudfoundryLogStub        func(cloudfoundry.Log) error
	putCloudfoundryLogMutex       sync.RWMutex
	putCloudfoundryLogArgsForCall []struct {
		arg1 cloudfoundry.Log
	}
	putCloudfoundryLogReturns struct {
		result1 error
	}
	putCloudfoundryLogReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLog(arg1 cloudfoundry.Log) error {
	fake.putCloudfoundryLogMutex.Lock()
	ret, specificReturn := fake.putCloudfoundryLogReturnsOnCall[len(fake.putCloudfoundryLogArgsForCall)]
	fake.putCloudfoundryLogArgsForCall = append(fake.putCloudfoundryLogArgsForCall, struct {
		arg1 cloudfoundry.Log
	}{arg1})
	fake.recordInvocation("PutCloudfoundryLog", []interface{}{arg1})
	fake.putCloudfoundryLogMutex.Unlock()
	if fake.PutCloudfoundryLogStub != nil {
		return fake.PutCloudfoundryLogStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putCloudfoundryLogReturns
	return fakeReturns.result1
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLogCallCount() int {
	fake.putCloudfoundryLogMutex.RLock()
	defer fake.putCloudfoundryLogMutex.RUnlock()
	return len(fake.putCloudfoundryLogArgsForCall)
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLogCalls(stub func(cloudfoundry.Log) error) {
	fake.putCloudfoundryLogMutex.Lock()
	defer fake.putCloudfoundryLogMutex.Unlock()
	fake.PutCloudfoundryLogStub = stub
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLogArgsForCall(i int) cloudfoundry.Log {
	fake.putCloudfoundryLogMutex.RLock()
	defer fake.putCloudfoundryLogMutex.RUnlock()
	argsForCall := fake.putCloudfoundryLogArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLogReturns(result1 error) {
	fake.putCloudfoundryLogMutex.Lock()
	defer fake.putCloudfoundryLogMutex.Unlock()
	fake.PutCloudfoundryLogStub = nil
	fake.putCloudfoundryLogReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfoundryLogPutter) PutCloudfoundryLogReturnsOnCall(i int, result1 error) {
	fake.putCloudfoundryLogMutex.Lock()
	defer fake.putCloudfoundryLogMutex.Unlock()
	fake.PutCloudfoundryLogStub = nil
	if fake.putCloudfoundryLogReturnsOnCall == nil {
		fake.putCloudfoundryLogReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putCloudfoundryLogReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfoundryLogPutter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putCloudfoundryLogMutex.RLock()
	defer fake.putCloudfoundryLogMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudfoundryLogPutter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csls.CloudfoundryLogPutter = new(FakeCloudfoundryLogPutter)
