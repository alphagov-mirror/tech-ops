resource_types:
  - name: s3-iam
    type: docker-image
    source:
      repository: governmentpaas/s3-resource
      tag: 97e441efbfb06ac7fb09786fd74c64b05f9cc907

resources:
  - name: nightly
    icon: timer
    type: time
    source:
      start: 6:00 PM
      stop: 8:00 PM
      location: Europe/London
  - name: sanitise-script
    icon: github-box
    type: git
    source:
      uri: https://github.com/alphagov/tech-ops.git
      branch: master
      paths:
        - reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/sanitise.py
        - reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/requirements.txt
  - name: urls
    icon: file
    type: s3-iam
    source:
      bucket: ((readonly_private_bucket_name))
      region_name: eu-west-2
      versioned_file: performance-platform-urls.txt
  - name: content-original
    icon: file
    type: s3-iam
    source:
      bucket: ((readonly_private_bucket_name))
      region_name: eu-west-2
      versioned_file: performance-platform-content-original.tar.gz
  - name: content-sanitised
    icon: file
    type: s3-iam
    source:
      bucket: ((readonly_private_bucket_name))
      region_name: eu-west-2
      versioned_file: performance-platform-content-sanitised.tar.gz
  - name: app-config
    icon: github-box
    type: git
    source:
      uri: https://github.com/alphagov/tech-ops.git
      branch: master
      paths:
        - reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/
  - name: "gov.uk/performance"
    icon: cloud
    type: cf
    source:
      api: https://api.cloud.service.gov.uk
      username: ((cf_user))
      password: ((cf_password))
      organization: gds-performance-platform
      space: production

jobs:

  - name: index
    build_log_retention:
      builds: 10
    serial: true
    plan:
      - get: nightly
        trigger: true
      - task: generate-url-list
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.6
          outputs:
            - name: urls
          run:
            path: /bin/bash
            args:
              - -eu
              - -c
              - |
                mkdir -p urls
                echo "crawling performance-platform-live.cloudapps.digital to build index of pages (this will take some time!)..."
                wget \
                  --level=3 \
                  --no-clobber \
                  --no-parent \
                  --reject 'ico,js,csv,png,jpg,jpeg,gif,css,svg' \
                  --recursive \
                  --wait=0 \
                  --retry-connrefused \
                  --retry-on-http-error=503 \
                  --content-on-error \
                  --execute robots=off \
                  --no-dns-cache \
                  https://performance-platform-spotlight-live.cloudapps.digital/performance/ 2>&1 \
                    | grep -E '^--' \
                    | grep -E -o 'https?://[^ ]+' \
                    | sort \
                    | uniq \
                    | awk '{ print length(), $0 | "sort -n" }' \
                    | cut -d ' ' -f 2- \
                    > urls/performance-platform-urls.txt
                cat urls/performance-platform-urls.txt
      - put: urls
        params:
          file: urls/performance-platform-urls.txt

  - name: mirror
    build_log_retention:
      builds: 10
    serial: true
    plan:
      - get: urls
        trigger: true
        passed: [index]
      - task: fetch-content
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.6
          inputs:
            - name: urls
          outputs:
            - name: output
          run:
            path: /bin/bash
            args:
              - -c
              - |
                echo "installing deps..."
                apt-get update
                apt-get install --yes parallel
                echo "downloading homepage to fetch css assets..."
                wget \
                  --page-requisites \
                  --adjust-extension \
                  --directory-prefix static \
                  --reject 'dropdown-arrow-small.png,external-link-24x24.png,external-link.png' \
                  --retry-connrefused \
                  --retry-on-http-error 503,400 \
                  --tries 2 \
                  --wait 0  \
                  --execute robots=off \
                  --no-dns-cache \
                  https://performance-platform-spotlight-live.cloudapps.digital/performance/
                echo "downloading mirror of all indexed spotlight content..."
                cat urls/performance-platform-urls.txt | parallel -j 12 wget \
                  --page-requisites \
                  --no-clobber \
                  --no-verbose \
                  --adjust-extension \
                  --directory-prefix static \
                  --reject 'dropdown-arrow-small.png,external-link-24x24.png,external-link.png,css' \
                  --retry-connrefused \
                  --retry-on-http-error 502,503 \
                  --tries 2 \
                  --wait 0  \
                  --content-on-error \
                  --execute robots=off \
                  --no-parent \
                  --no-dns-cache
                echo "creating mirror tarball..."
                mkdir -p output
                tar -zcvf output/performance-platform-content-original.tar.gz static/
      - put: content-original
        params:
          file: output/performance-platform-content-original.tar.gz

  - name: sanitise
    build_log_retention:
      builds: 10
    serial: true
    plan:
      - get: sanitise-script
        trigger: true
      - get: content-original
        trigger: true
        passed: [mirror]
      - task: strip-javascript
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.6
          inputs:
            - name: sanitise-script
            - name: content-original
          outputs:
            - name: output
          run:
            path: /bin/bash
            args:
              - -eu
              - -c
              - |
                pip install -r sanitise-script/reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/requirements.txt
                echo "unpacking original content..."
                tar -zxvf content-original/performance-platform-content-original.tar.gz
                echo "creating sanitised tarball..."
                (cd static && python ../sanitise-script/reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/sanitise.py)
                mkdir -p output
                tar -zcvf output/performance-platform-content-sanitised.tar.gz static/
      - put: content-sanitised
        params:
          file: output/performance-platform-content-sanitised.tar.gz

  - name: deploy
    build_log_retention:
      builds: 10
    serial: true
    plan:
      - get: app-config
        trigger: true
      - get: content-sanitised
        trigger: true
        passed: [sanitise]
      - task: inject-app-content
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
          inputs:
            - name: content-sanitised
            - name: app-config
          outputs:
            - name: app
          run:
            path: sh
            args:
              - -eu
              - -c
              - |
                mkdir -p app
                cp \
                  app-config/reliability-engineering/paas/www.gov.uk_performance/performance-platform-static/static/* \
                  ./app/
                tar -zxvf content-sanitised/performance-platform-content-sanitised.tar.gz
                mv \
                  static/performance-platform-spotlight-live.cloudapps.digital \
                  app/public
      - put: gov.uk/performance
        params:
          manifest: app/manifest.production.yml
          path: app

