
resource_types:

- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.12.25
- name: paas-semver
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
    tag: latest
- name: pool
  type: registry-image
  source:
    # pool is included by default but the bundled resource is broke
    # https://github.com/concourse/pool-resource/pull/56
    repository: concourse/pool-resource
    tag: 1.1.3

resources:

- name: tech-ops-private
  icon: github
  type: git
  source:
    branch: ((deployment_branch))
    uri: git@github.com:alphagov/tech-ops-private.git
    private_key: ((re-autom8-ci-github-ssh-private-key))
    paths:
      - reliability-engineering/terraform/deployments/gds-tech-ops/((deployment_name))
- name: tech-ops
  icon: github
  type: git
  source:
    branch: ((deployment_branch))
    tag_filter: ((deployment_tag))
    uri: git@github.com:alphagov/tech-ops.git
    private_key: ((re-autom8-ci-github-ssh-private-key))
    paths:
      - reliability-engineering/terraform/modules
      - reliability-engineering/pipelines/tasks/asg-scale-max-capacity.yml
      - reliability-engineering/pipelines/tasks/concourse-land-workers.yml
      - reliability-engineering/pipelines/tasks/concourse-provider-config.yml
      - reliability-engineering/pipelines/tasks/sign-tag.yml
      - reliability-engineering/pipelines/tasks/verify-tag.yml
      - reliability-engineering/pipelines/concourse-deployer.yml
      - reliability-engineering/dockerfiles/test.Dockerfile
- name: infra
  icon: terraform
  type: terraform
  source:
    env_name: default
    backend_type: s3
    private_key: ((re-autom8-ci-github-ssh-private-key))
    backend_config:
      bucket: gds-tech-ops-tfstate
      region: eu-west-2
      key: ((deployment_name)).tfstate
- name: version
  type: paas-semver
  source:
    driver: s3
    key: ((deployment_name))-version
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    initial_version: '1.0.0'
- name: ecr
  type: docker-image
  icon: layers
  source:
    repository: ((readonly_private_ecr_repo_url))
- name: pool-repo
  type: git
  icon: github
  source:
    branch: pool
    uri: ((readonly_codecommit_pool_uri))
    private_key: ((readonly_codecommit_private_key))
- name: pool
  type: pool
  icon: pool
  source:
    branch: pool
    uri: ((readonly_codecommit_pool_uri))
    private_key: ((readonly_codecommit_private_key))
    pool: my-pool
- name: a-test-lock-config
  type: mock
  source:
    create_files:
      name: a-test-lock
      metadata: ''
- name: concourse-release
  type: github-release
  source:
    owner: concourse
    repository: concourse
- name: fly
  type: registry-image
  source:
    repository: concourse/concourse-pipeline-resource
    tag: latest

jobs:

- name: update
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops-private
      trigger: true
    - get: tech-ops
      trigger: true
    - get: infra
  - task: verify-tech-ops-tag
    file: tech-ops/reliability-engineering/pipelines/tasks/verify-tag.yml
    input_mapping:
      repository: tech-ops
    params:
      GPG_VERIFICATION_KEY: ((re-autom8-ci-github-gpg-private-key))
      GPG_VERIFICATION_TAG: ((deployment_tag))
  - set_pipeline: deploy
    file: tech-ops/reliability-engineering/pipelines/concourse-deployer.yml
    vars:
      deployment_name: ((deployment_name))
      deployment_branch: ((deployment_branch))
      deployment_tag: ((deployment_tag))

- name: deploy
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops-private
      passed: [update]
      trigger: true
    - get: tech-ops
      passed: [update]
      trigger: true
    - get: infra
      passed: [update]
    - get: concourse-release
      trigger: true
      params:
        globs:
        - concourse-*-linux-amd64.tgz.sha1
  - task: configure-providers
    file: tech-ops/reliability-engineering/pipelines/tasks/concourse-provider-config.yml
    params:
      DEPLOYMENT_NAME: ((deployment_name))
  - put: infra
    params:
      terraform_source: tech-ops-private/reliability-engineering/terraform/deployments/gds-tech-ops/((deployment_name))
      override_files:
      - concourse-provider-config/provider_concourse_override.tf.json
      var_files:
      - concourse-provider-config/version.tfvars
  - task: generate-roll-instances-pipeline
    file: tech-ops/reliability-engineering/pipelines/tasks/generate-roll-instances-pipeline.yml
    image: fly
    params:
      CONCOURSE_USERNAME: main
      CONCOURSE_PASSWORD: ((readonly_local_user_password))
  - set_pipeline: roll-instances
    file: roll-instances-pipeline/roll-instances.yml
  - set_pipeline: deploy-info-pipelines
    file: tech-ops-private/reliability-engineering/terraform/deployments/gds-tech-ops/((deployment_name))/deploy-info-pipelines.yml
    vars:
      deployment_branch: ((deployment_branch))

- name: scale-out
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops-private
      passed: [deploy]
      trigger: true
    - get: tech-ops
      passed: [deploy]
      trigger: true
    - get: infra
      passed: [deploy]
    - get: concourse-release
      passed: [deploy]
      trigger: true
      params:
        globs:
        - concourse-*-linux-amd64.tgz.sha1
    - get: fly
  - task: configure-providers
    file: tech-ops/reliability-engineering/pipelines/tasks/concourse-provider-config.yml
    params:
      DEPLOYMENT_NAME: ((deployment_name))
  - task: get-current-workers
    file: tech-ops/reliability-engineering/pipelines/tasks/concourse-get-workers.yml
    image: fly
    params:
      DEPLOYMENT_NAME: ((deployment_name))
  - do:
    - in_parallel:
      - task: scale-out-web-node-asg
        file: tech-ops/reliability-engineering/pipelines/tasks/asg-scale-max-capacity.yml
        params:
          ASG_PREFIX: ((deployment_name))-concourse-web
      - task: scale-out-main-team-workers-asg
        file: tech-ops/reliability-engineering/pipelines/tasks/asg-scale-max-capacity.yml
        params:
          ASG_PREFIX: ((deployment_name))-main-concourse-worker
    - task: land-old-workers
      file: tech-ops/reliability-engineering/pipelines/tasks/concourse-land-workers.yml
      image: fly
      params:
        DEPLOYMENT_NAME: ((deployment_name))
    on_failure:
      put: infra # try to scale back in on failure to stay in sync
      attempts: 10
      params:
        terraform_source: tech-ops-private/reliability-engineering/terraform/deployments/gds-tech-ops/((deployment_name))
        override_files:
        - concourse-provider-config/provider_concourse_override.tf.json
        var_files:
        - concourse-provider-config/version.tfvars

- name: scale-in
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops-private
      passed: [scale-out]
      trigger: true
    - get: tech-ops
      passed: [scale-out]
      trigger: true
    - get: infra
      passed: [scale-out]
    - get: concourse-release
      passed: [scale-out]
      trigger: true
      params:
        globs:
        - concourse-*-linux-amd64.tgz.sha1
  - task: configure-providers
    file: tech-ops/reliability-engineering/pipelines/tasks/concourse-provider-config.yml
    params:
      DEPLOYMENT_NAME: ((deployment_name))
  - put: infra
    attempts: 10
    params:
      terraform_source: tech-ops-private/reliability-engineering/terraform/deployments/gds-tech-ops/((deployment_name))
      override_files:
      - concourse-provider-config/provider_concourse_override.tf.json
      var_files:
      - concourse-provider-config/version.tfvars

- name: test
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops-private
      attempts: 10
      passed: [scale-in]
      trigger: true
    - get: tech-ops
      attempts: 10
      passed: [scale-in]
      trigger: true
    - get: version
      attempts: 10
      params: {bump: minor}

  # this is a simple check to ensure push to ecr works
  - put: ecr
    attempts: 10
    params:
      build: version
      dockerfile: tech-ops/reliability-engineering/dockerfiles/test.Dockerfile
      tag: version/version
      tag_prefix: ((deployment_name))-

  # the following tasks exercise the codecommit repo provided for pool-resource
  - task: init-pool
    attempts: 10
    file: tech-ops/reliability-engineering/pipelines/tasks/test-init-pool.yml
    output_mapping:
      repo: pool
  - put: pool-repo
    attempts: 10
    params:
      repository: pool
      force: true
  - get: a-test-lock-config  # defines a lock
    attempts: 10
  - put: add-lock  # adds the lock to the pool
    attempts: 10
    resource: pool
    params:
      add: a-test-lock-config
  - put: acquire-lock  # get the lock
    attempts: 10
    resource: pool
    params:
      acquire: true
  - put: release-lock  # releases the lock
    attempts: 10
    resource: pool
    params:
      release: a-test-lock-config

  # check that logs are arriving in CloudWatch
  - in_parallel:
    - task: check-web-logs
      attempts: 10
      file: tech-ops/reliability-engineering/pipelines/tasks/test-log-shipping.yml
      timeout: 10m
      params:
        LOG_GROUP: /((deployment_name))/concourse/web
    - task: check-worker-logs
      attempts: 10
      file: tech-ops/reliability-engineering/pipelines/tasks/test-log-shipping.yml
      timeout: 10m
      params:
        LOG_GROUP: /((deployment_name))/concourse/worker

- name: tag-release
  serial: true
  serial_groups: [deploy]
  plan:
  - in_parallel:
    - get: tech-ops
      passed: [test]
      trigger: true
    - get: version
      params: {bump: minor}

  # this promotes the repo for use in other deployments (eg cd-staging -> cd)
  - task: tag-tech-ops
    file: tech-ops/reliability-engineering/pipelines/tasks/sign-tag.yml
    input_mapping:
      repository: tech-ops
      version: version
    params:
      SSH_PRIVATE_KEY: ((re-autom8-ci-github-ssh-private-key))
      GPG_PRIVATE_KEY: ((re-autom8-ci-github-gpg-private-key))
      TAG_PREFIX: ((deployment_name))-
  - put: version
    params:
      file: version/version
